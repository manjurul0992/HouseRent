@page "/Tenants/List"
@using HouseRent.Shared.DTO;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize]
<div class="row justify-content-center" style="background-color: #FFF5EE; padding: 20px; border: 1px solid #E0E0E0; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">
    <div class="col-11">
        <h3 class="text-center fw-bold text-secondary">Tenants List</h3>
        <div class="d-flex justify-content-end mb-2">
            <a href="/Tenants/Create" class="btn btn-outline-primary shadow-lg btn-sm"><i class="bi bi-plus"></i></a>
        </div>
        @if (Tenants is null)
        {
            <img src="/Uploads/loading.gif" />
        }
        else
        {
            <table class="table table-bordered table-responsive-sm table-hover table-striped shadow">
                <thead class="table-light">
                    <tr>
                        <th>Tenant name</th>
                        <th>Address</th>
                        <th>E-mail</th>
                        <th>...</th>
                    </tr>

                </thead>
                <tbody>
                    @foreach (var c in Tenants)
                    {
                        <tr>
                            <td>@c.TenantName</td>
                            <td>@c.Address</td>
                            <td>@c.Email</td>
                            <th>
                                <a class="btn btn-outline-success btn-sm shadow" href="/Tenants/edit/@c.TenantID"><i class="bi bi-pencil"></i></a>
                                <a class="btn btn-danger shadow btn-sm @getDisabledClass(c.CanDelete)" href="/Tenants/delete/@c.TenantID"><i class="bi bi-trash"></i></a>
                            </th>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>
@inject HttpClient http
@code {
    private TenantDTO[]? Tenants;
    protected override async Task OnInitializedAsync()
    {
        Tenants = await this.http.GetFromJsonAsync<TenantDTO[]>("api/Tenants/DTO");
    }
    public string getDisabledClass(bool canDelete)
    {
        return canDelete ? "" : "disabled";
    }

    //public async Task DeleteData(long id)
    //{
    //    bool result = await _empService.DeleteDataById(id);
    //    empAllData = await _empService.GetAll();
    //    StateHasChanged();
    //}

}
